

int[] sumClosest(int[] arr, int x) {
       int n=arr.length;
       int i=0,s=Integer.MAX_VALUE;
       int r=0,l=0,k=n-1;
       while(i<k)
       {
           
           if(mod((arr[i]+arr[k]),x)<s)
           {
                r=i;
               l=k;
               s=mod((arr[i]+arr[k]),x);
           }
           if(arr[i]+arr[k]==x)
           {
               r=i;
               l=k;
               break;
           }
           else if((arr[i]+arr[k])>x)
           k--;
           else
           i++;
          
       }
       int ans[]=new int[2];
       ans[0]=arr[r];
       ans[1]=arr[l];
       return ans;
       
   }
   static int mod(int a,int b)
   {
       if(a>b)
       return a-b;
       else
       return b-a;
   }
   
   
   ///////////////////////////////////////////////////////////////////////////
   
   
   class Solution {
    int[] sumClosest(int[] arr, int x) {
        int[] ans=new int[2];
        int low=0;
        int high=arr.length-1;
        int diff=Integer.MAX_VALUE;
        
        while(low<high){
            int temp=x-(arr[low]+arr[high]);
            if(diff>Math.abs(temp)){
                ans[0]=arr[low];
                ans[1]=arr[high];
                diff=Math.abs(temp);
            }
            if(temp==0){
                break;
            }
            if(temp>0){
                low++;
            }
            if(temp<0){
                high--;
            }
        }
        return ans;
    }
}
   
   
// got an array, got 2 pointers low and high we check if arr[low]+arr[high] - sum to be found is present in array 
// if yes, store the diff 
// it will iterate till low and high becomes equal, and store the low and high value in array whose arr[low]+arr[high] - sum is minimum.


