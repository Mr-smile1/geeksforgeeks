


class Solution{
   static long trappingWater(int arr[], int n) { 
       int left[]=new int[n];
       int right[]=new int[n];
       left[0]=arr[0];
       for(int i=1;i<n;i++){
           left[i]=Math.max(left[i-1],arr[i]);
       }
       right[n-1]=arr[n-1];
       for(int i=n-2;i>=0;i--){
           right[i]=Math.max(right[i+1],arr[i]);
       }
       long ans=0;
       for(int i=0;i<n;i++){
           ans+=(Math.min(left[i],right[i])-arr[i]);
       }
       return ans;
   } 
}


// find the max left and max right, for every iteration of the array
// and store it in 2 arrays left and right
// after that compare left and right height and their min will be the point till where water will be filled
// but we will also have to subtract the height of the current position/tower.



time  : O(n)
space : O(n)


///////////////////////////////////////////////////////////////////////////////////



class Solution{
    static long trappingWater(int arr[], int n) { 
        int i=0;
        int j=n-1;
        int low=arr[0];          // first element
        int high=arr[n-1];       // last element
        long result=0;
        while(i<j){
            if(arr[i]<arr[j]){        // first element smaller than last element
                if(arr[i]>low){       // first element reater than arr[0]
                    low=arr[i];
                }
                else{
                    result+=low-arr[i];
                    i++;
                }
            }
            else{
                if(arr[j]>high){
                    high=arr[j];
                }
                else{
                    result+=high-arr[j];
                    j--;
                }
            }
        }
        return result;
    } 




time  : O(n)
space : O(1)


