
//brute force

class Solution {
    int getPairsCount(int[] arr, int n, int k) {
        int count=0;
        for(int i=0;i<n;++i){
            for(int j=i+1;j<n;++j){
                if( (arr[i] + arr[j]) == k){
                    count++;
                }
            }
        }
        return count;
    }
}

//////////////////////////////////////////////////////////////////////////////////


class Solution {
    int getPairsCount(int[] arr, int n, int k) {            // a+b = s => a = s-b, as a is the pair , b = arr[i] and s is sum
        // code here
       HashMap<Integer,Integer> map = new HashMap<>();      // <key, value>        // hashmap = unordered pair
       int count=0;
       for(int i=0;i<n;i++)
       {                                                   // arr[] = {1,5,7,1} , k = 6
           if(map.containsKey(k-arr[i])) {                 // 6-1 = 5 , if it is in map 
               count += map.get(k-arr[i]);                 // count = count + map.get(5) = 0 + 0 = 0
           }
           
           if(!map.containsKey(arr[i]))                    // if map do not contain arr[0] = 1 
               map.put(arr[i],1);                          // 
           else
               map.put(arr[i],map.get(arr[i])+1);
       }
       return count;
    }
}

// The java.util.Map.containsKey() method is used to check whether a particular key is being mapped into the Map or not. 
// It takes the key element as a parameter and returns True if that element is mapped in the map.
